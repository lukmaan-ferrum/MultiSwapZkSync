/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace OneInchDecoder {
  export type OrderRFQStruct = {
    info: BigNumberish;
    makerAsset: AddressLike;
    takerAsset: AddressLike;
    maker: AddressLike;
    allowedSender: AddressLike;
    makingAmount: BigNumberish;
    takingAmount: BigNumberish;
  };

  export type OrderRFQStructOutput = [
    info: bigint,
    makerAsset: string,
    takerAsset: string,
    maker: string,
    allowedSender: string,
    makingAmount: bigint,
    takingAmount: bigint
  ] & {
    info: bigint;
    makerAsset: string;
    takerAsset: string;
    maker: string;
    allowedSender: string;
    makingAmount: bigint;
    takingAmount: bigint;
  };

  export type OrderStruct = {
    salt: BigNumberish;
    makerAsset: AddressLike;
    takerAsset: AddressLike;
    maker: AddressLike;
    receiver: AddressLike;
    allowedSender: AddressLike;
    makingAmount: BigNumberish;
    takingAmount: BigNumberish;
    offsets: BigNumberish;
    interactions: BytesLike;
  };

  export type OrderStructOutput = [
    salt: bigint,
    makerAsset: string,
    takerAsset: string,
    maker: string,
    receiver: string,
    allowedSender: string,
    makingAmount: bigint,
    takingAmount: bigint,
    offsets: bigint,
    interactions: string
  ] & {
    salt: bigint;
    makerAsset: string;
    takerAsset: string;
    maker: string;
    receiver: string;
    allowedSender: string;
    makingAmount: bigint;
    takingAmount: bigint;
    offsets: bigint;
    interactions: string;
  };

  export type SwapDescriptionStruct = {
    srcToken: AddressLike;
    dstToken: AddressLike;
    srcReceiver: AddressLike;
    dstReceiver: AddressLike;
    amount: BigNumberish;
    minReturnAmount: BigNumberish;
    flags: BigNumberish;
  };

  export type SwapDescriptionStructOutput = [
    srcToken: string,
    dstToken: string,
    srcReceiver: string,
    dstReceiver: string,
    amount: bigint,
    minReturnAmount: bigint,
    flags: bigint
  ] & {
    srcToken: string;
    dstToken: string;
    srcReceiver: string;
    dstReceiver: string;
    amount: bigint;
    minReturnAmount: bigint;
    flags: bigint;
  };
}

export interface OneInchDecoderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decodeFillOrderRFQTo"
      | "decodeFillOrderTo"
      | "decodeSwap"
      | "decodeSwap2"
      | "decodeUniswapV3Swap"
      | "decodeUnoswap"
      | "selectorFillOrderRFQTo"
      | "selectorFillOrderTo"
      | "selectorSwap"
      | "selectorUniswapV3Swap"
      | "selectorUnoswap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "decodeFillOrderRFQTo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeFillOrderTo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeSwap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeSwap2",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeUniswapV3Swap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeUnoswap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "selectorFillOrderRFQTo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectorFillOrderTo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectorSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectorUniswapV3Swap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "selectorUnoswap",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "decodeFillOrderRFQTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeFillOrderTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decodeSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decodeSwap2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeUniswapV3Swap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeUnoswap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectorFillOrderRFQTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectorFillOrderTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectorSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectorUniswapV3Swap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectorUnoswap",
    data: BytesLike
  ): Result;
}

export interface OneInchDecoder extends BaseContract {
  connect(runner?: ContractRunner | null): OneInchDecoder;
  waitForDeployment(): Promise<this>;

  interface: OneInchDecoderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decodeFillOrderRFQTo: TypedContractMethod<
    [data: BytesLike],
    [
      [OneInchDecoder.OrderRFQStructOutput, string, bigint, string] & {
        order: OneInchDecoder.OrderRFQStructOutput;
        signature: string;
        flagsAndAmount: bigint;
        target: string;
      }
    ],
    "view"
  >;

  decodeFillOrderTo: TypedContractMethod<
    [data: BytesLike],
    [
      [
        OneInchDecoder.OrderStructOutput,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        order_: OneInchDecoder.OrderStructOutput;
        signature: string;
        interaction: string;
        makingAmount: bigint;
        takingAmount: bigint;
        skipPermitAndThresholdAmount: bigint;
        target: string;
      }
    ],
    "view"
  >;

  decodeSwap: TypedContractMethod<
    [data: BytesLike],
    [
      [string, OneInchDecoder.SwapDescriptionStructOutput, string, string] & {
        executor: string;
        desc: OneInchDecoder.SwapDescriptionStructOutput;
        permit: string;
        swapData: string;
      }
    ],
    "view"
  >;

  decodeSwap2: TypedContractMethod<
    [data: BytesLike],
    [
      [string, bigint, bigint] & {
        recipient: string;
        amount: bigint;
        minReturn: bigint;
      }
    ],
    "view"
  >;

  decodeUniswapV3Swap: TypedContractMethod<
    [data: BytesLike],
    [
      [string, bigint, bigint, bigint[]] & {
        recipient: string;
        amount: bigint;
        minReturn: bigint;
        pools: bigint[];
      }
    ],
    "view"
  >;

  decodeUnoswap: TypedContractMethod<
    [data: BytesLike],
    [
      [string, string, bigint, bigint, bigint[]] & {
        recipient: string;
        srcToken: string;
        amount: bigint;
        minReturn: bigint;
        pools: bigint[];
      }
    ],
    "view"
  >;

  selectorFillOrderRFQTo: TypedContractMethod<[], [string], "view">;

  selectorFillOrderTo: TypedContractMethod<[], [string], "view">;

  selectorSwap: TypedContractMethod<[], [string], "view">;

  selectorUniswapV3Swap: TypedContractMethod<[], [string], "view">;

  selectorUnoswap: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decodeFillOrderRFQTo"
  ): TypedContractMethod<
    [data: BytesLike],
    [
      [OneInchDecoder.OrderRFQStructOutput, string, bigint, string] & {
        order: OneInchDecoder.OrderRFQStructOutput;
        signature: string;
        flagsAndAmount: bigint;
        target: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "decodeFillOrderTo"
  ): TypedContractMethod<
    [data: BytesLike],
    [
      [
        OneInchDecoder.OrderStructOutput,
        string,
        string,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        order_: OneInchDecoder.OrderStructOutput;
        signature: string;
        interaction: string;
        makingAmount: bigint;
        takingAmount: bigint;
        skipPermitAndThresholdAmount: bigint;
        target: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "decodeSwap"
  ): TypedContractMethod<
    [data: BytesLike],
    [
      [string, OneInchDecoder.SwapDescriptionStructOutput, string, string] & {
        executor: string;
        desc: OneInchDecoder.SwapDescriptionStructOutput;
        permit: string;
        swapData: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "decodeSwap2"
  ): TypedContractMethod<
    [data: BytesLike],
    [
      [string, bigint, bigint] & {
        recipient: string;
        amount: bigint;
        minReturn: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "decodeUniswapV3Swap"
  ): TypedContractMethod<
    [data: BytesLike],
    [
      [string, bigint, bigint, bigint[]] & {
        recipient: string;
        amount: bigint;
        minReturn: bigint;
        pools: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "decodeUnoswap"
  ): TypedContractMethod<
    [data: BytesLike],
    [
      [string, string, bigint, bigint, bigint[]] & {
        recipient: string;
        srcToken: string;
        amount: bigint;
        minReturn: bigint;
        pools: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "selectorFillOrderRFQTo"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "selectorFillOrderTo"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "selectorSwap"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "selectorUniswapV3Swap"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "selectorUnoswap"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
