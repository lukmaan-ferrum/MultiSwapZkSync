/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IOneInchSwap {
  export type OrderRFQStruct = {
    info: BigNumberish;
    makerAsset: AddressLike;
    takerAsset: AddressLike;
    maker: AddressLike;
    allowedSender: AddressLike;
    makingAmount: BigNumberish;
    takingAmount: BigNumberish;
  };

  export type OrderRFQStructOutput = [
    info: bigint,
    makerAsset: string,
    takerAsset: string,
    maker: string,
    allowedSender: string,
    makingAmount: bigint,
    takingAmount: bigint
  ] & {
    info: bigint;
    makerAsset: string;
    takerAsset: string;
    maker: string;
    allowedSender: string;
    makingAmount: bigint;
    takingAmount: bigint;
  };

  export type OrderStruct = {
    salt: BigNumberish;
    makerAsset: AddressLike;
    takerAsset: AddressLike;
    maker: AddressLike;
    receiver: AddressLike;
    allowedSender: AddressLike;
    makingAmount: BigNumberish;
    takingAmount: BigNumberish;
    offsets: BigNumberish;
    interactions: BytesLike;
  };

  export type OrderStructOutput = [
    salt: bigint,
    makerAsset: string,
    takerAsset: string,
    maker: string,
    receiver: string,
    allowedSender: string,
    makingAmount: bigint,
    takingAmount: bigint,
    offsets: bigint,
    interactions: string
  ] & {
    salt: bigint;
    makerAsset: string;
    takerAsset: string;
    maker: string;
    receiver: string;
    allowedSender: string;
    makingAmount: bigint;
    takingAmount: bigint;
    offsets: bigint;
    interactions: string;
  };

  export type SwapDescriptionStruct = {
    srcToken: AddressLike;
    dstToken: AddressLike;
    srcReceiver: AddressLike;
    dstReceiver: AddressLike;
    amount: BigNumberish;
    minReturnAmount: BigNumberish;
    flags: BigNumberish;
  };

  export type SwapDescriptionStructOutput = [
    srcToken: string,
    dstToken: string,
    srcReceiver: string,
    dstReceiver: string,
    amount: bigint,
    minReturnAmount: bigint,
    flags: bigint
  ] & {
    srcToken: string;
    dstToken: string;
    srcReceiver: string;
    dstReceiver: string;
    amount: bigint;
    minReturnAmount: bigint;
    flags: bigint;
  };
}

export interface IOneInchSwapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "fillOrderRFQTo"
      | "fillOrderTo"
      | "swap"
      | "uniswapV3SwapTo"
      | "unoswapTo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fillOrderRFQTo",
    values: [IOneInchSwap.OrderRFQStruct, BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrderTo",
    values: [
      IOneInchSwap.OrderStruct,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      AddressLike,
      IOneInchSwap.SwapDescriptionStruct,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3SwapTo",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unoswapTo",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "fillOrderRFQTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrderTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3SwapTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unoswapTo", data: BytesLike): Result;
}

export interface IOneInchSwap extends BaseContract {
  connect(runner?: ContractRunner | null): IOneInchSwap;
  waitForDeployment(): Promise<this>;

  interface: IOneInchSwapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  fillOrderRFQTo: TypedContractMethod<
    [
      order: IOneInchSwap.OrderRFQStruct,
      signature: BytesLike,
      flagsAndAmount: BigNumberish,
      target: AddressLike
    ],
    [
      [bigint, bigint, string] & {
        filledMakingAmount: bigint;
        filledTakingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;

  fillOrderTo: TypedContractMethod<
    [
      order_: IOneInchSwap.OrderStruct,
      signature: BytesLike,
      interaction: BytesLike,
      makingAmount: BigNumberish,
      takingAmount: BigNumberish,
      skipPermitAndThresholdAmount: BigNumberish,
      target: AddressLike
    ],
    [
      [bigint, bigint, string] & {
        actualMakingAmount: bigint;
        actualTakingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;

  swap: TypedContractMethod<
    [
      executor: AddressLike,
      desc: IOneInchSwap.SwapDescriptionStruct,
      permit: BytesLike,
      data: BytesLike
    ],
    [[bigint, bigint] & { returnAmount: bigint; spentAmount: bigint }],
    "payable"
  >;

  uniswapV3SwapTo: TypedContractMethod<
    [
      recipient: AddressLike,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BigNumberish[]
    ],
    [bigint],
    "payable"
  >;

  unoswapTo: TypedContractMethod<
    [
      recipient: AddressLike,
      srcToken: AddressLike,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BigNumberish[]
    ],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "fillOrderRFQTo"
  ): TypedContractMethod<
    [
      order: IOneInchSwap.OrderRFQStruct,
      signature: BytesLike,
      flagsAndAmount: BigNumberish,
      target: AddressLike
    ],
    [
      [bigint, bigint, string] & {
        filledMakingAmount: bigint;
        filledTakingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fillOrderTo"
  ): TypedContractMethod<
    [
      order_: IOneInchSwap.OrderStruct,
      signature: BytesLike,
      interaction: BytesLike,
      makingAmount: BigNumberish,
      takingAmount: BigNumberish,
      skipPermitAndThresholdAmount: BigNumberish,
      target: AddressLike
    ],
    [
      [bigint, bigint, string] & {
        actualMakingAmount: bigint;
        actualTakingAmount: bigint;
        orderHash: string;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      executor: AddressLike,
      desc: IOneInchSwap.SwapDescriptionStruct,
      permit: BytesLike,
      data: BytesLike
    ],
    [[bigint, bigint] & { returnAmount: bigint; spentAmount: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "uniswapV3SwapTo"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BigNumberish[]
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unoswapTo"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      srcToken: AddressLike,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BigNumberish[]
    ],
    [bigint],
    "payable"
  >;

  filters: {};
}
