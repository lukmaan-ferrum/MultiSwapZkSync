/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MultiSwapForgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "WETH"
      | "gasEstimationAddress"
      | "gasWallet"
      | "inventory"
      | "nonEvmSwap"
      | "oneInchAggregatorRouter"
      | "owner"
      | "pool"
      | "renounceOwnership"
      | "setGasEstimationAddress"
      | "setGasWallet"
      | "setOneInchAggregatorRouter"
      | "setPool"
      | "setWETH"
      | "swap"
      | "swapAndCrossOneInch"
      | "swapAndCrossOneInchETH"
      | "transferOwnership"
      | "withdrawSigned"
      | "withdrawSignedAndSwapOneInch"
      | "withdrawSignedAndSwapOneInchForGasEstimation"
      | "withdrawSignedForGasEstimation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NonEvmSwap"
      | "OwnershipTransferred"
      | "Swap"
      | "SwapHandled"
      | "UniswapV3SwapHandled"
      | "UnoSwapHandled"
      | "Withdraw"
      | "WithdrawOneInch"
  ): EventFragment;

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gasEstimationAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "inventory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nonEvmSwap",
    values: [AddressLike, BigNumberish, string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oneInchAggregatorRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGasEstimationAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOneInchAggregatorRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWETH",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndCrossOneInch",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike,
      AddressLike,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapAndCrossOneInchETH",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike,
      AddressLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSigned",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSignedAndSwapOneInch",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSignedAndSwapOneInchForGasEstimation",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSignedForGasEstimation",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gasEstimationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inventory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonEvmSwap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oneInchAggregatorRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasEstimationAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOneInchAggregatorRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapAndCrossOneInch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapAndCrossOneInchETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSignedAndSwapOneInch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSignedAndSwapOneInchForGasEstimation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSignedForGasEstimation",
    data: BytesLike
  ): Result;
}

export namespace NonEvmSwapEvent {
  export type InputTuple = [
    sourceToken: AddressLike,
    targetToken: string,
    sourceChainId: BigNumberish,
    targetChainId: string,
    sourceAmount: BigNumberish,
    sourceAddress: AddressLike,
    targetAddress: string,
    settledAmount: BigNumberish,
    withdrawalData: BytesLike
  ];
  export type OutputTuple = [
    sourceToken: string,
    targetToken: string,
    sourceChainId: bigint,
    targetChainId: string,
    sourceAmount: bigint,
    sourceAddress: string,
    targetAddress: string,
    settledAmount: bigint,
    withdrawalData: string
  ];
  export interface OutputObject {
    sourceToken: string;
    targetToken: string;
    sourceChainId: bigint;
    targetChainId: string;
    sourceAmount: bigint;
    sourceAddress: string;
    targetAddress: string;
    settledAmount: bigint;
    withdrawalData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapEvent {
  export type InputTuple = [
    sourceToken: AddressLike,
    targetToken: AddressLike,
    sourceChainId: BigNumberish,
    targetChainId: BigNumberish,
    sourceAmount: BigNumberish,
    sourceAddress: AddressLike,
    targetAddress: AddressLike,
    settledAmount: BigNumberish,
    withdrawalData: BytesLike,
    gasAmount: BigNumberish
  ];
  export type OutputTuple = [
    sourceToken: string,
    targetToken: string,
    sourceChainId: bigint,
    targetChainId: bigint,
    sourceAmount: bigint,
    sourceAddress: string,
    targetAddress: string,
    settledAmount: bigint,
    withdrawalData: string,
    gasAmount: bigint
  ];
  export interface OutputObject {
    sourceToken: string;
    targetToken: string;
    sourceChainId: bigint;
    targetChainId: bigint;
    sourceAmount: bigint;
    sourceAddress: string;
    targetAddress: string;
    settledAmount: bigint;
    withdrawalData: string;
    gasAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapHandledEvent {
  export type InputTuple = [
    swapRouter: AddressLike,
    to: AddressLike,
    fromToken: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    swapRouter: string,
    to: string,
    fromToken: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    swapRouter: string;
    to: string;
    fromToken: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UniswapV3SwapHandledEvent {
  export type InputTuple = [
    swapRouter: AddressLike,
    to: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    swapRouter: string,
    to: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    swapRouter: string;
    to: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnoSwapHandledEvent {
  export type InputTuple = [
    swapRouter: AddressLike,
    to: AddressLike,
    fromToken: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [
    swapRouter: string,
    to: string,
    fromToken: string,
    amountIn: bigint,
    amountOut: bigint
  ];
  export interface OutputObject {
    swapRouter: string;
    to: string;
    fromToken: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    token: AddressLike,
    receiver: AddressLike,
    amount: BigNumberish,
    salt: BytesLike,
    signature: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    receiver: string,
    amount: bigint,
    salt: string,
    signature: string
  ];
  export interface OutputObject {
    token: string;
    receiver: string;
    amount: bigint;
    salt: string;
    signature: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawOneInchEvent {
  export type InputTuple = [
    to: AddressLike,
    amountIn: BigNumberish,
    amountOutOneInch: BigNumberish,
    foundryToken: AddressLike,
    targetToken: AddressLike,
    oneInchData: BytesLike,
    salt: BytesLike,
    multiSignature: BytesLike
  ];
  export type OutputTuple = [
    to: string,
    amountIn: bigint,
    amountOutOneInch: bigint,
    foundryToken: string,
    targetToken: string,
    oneInchData: string,
    salt: string,
    multiSignature: string
  ];
  export interface OutputObject {
    to: string;
    amountIn: bigint;
    amountOutOneInch: bigint;
    foundryToken: string;
    targetToken: string;
    oneInchData: string;
    salt: string;
    multiSignature: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultiSwapForge extends BaseContract {
  connect(runner?: ContractRunner | null): MultiSwapForge;
  waitForDeployment(): Promise<this>;

  interface: MultiSwapForgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  WETH: TypedContractMethod<[], [string], "view">;

  gasEstimationAddress: TypedContractMethod<[], [string], "view">;

  gasWallet: TypedContractMethod<[], [string], "view">;

  inventory: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  nonEvmSwap: TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      targetNetwork: string,
      targetToken: string,
      targetAddress: string,
      withdrawalData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  oneInchAggregatorRouter: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pool: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setGasEstimationAddress: TypedContractMethod<
    [_gasEstimationAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setGasWallet: TypedContractMethod<
    [_gasWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  setOneInchAggregatorRouter: TypedContractMethod<
    [_newRouterAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setPool: TypedContractMethod<[_pool: AddressLike], [void], "nonpayable">;

  setWETH: TypedContractMethod<[_weth: AddressLike], [void], "nonpayable">;

  swap: TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: AddressLike,
      targetAddress: AddressLike,
      withdrawalData: BytesLike
    ],
    [void],
    "payable"
  >;

  swapAndCrossOneInch: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      crossTargetNetwork: BigNumberish,
      crossTargetToken: AddressLike,
      crossTargetAddress: AddressLike,
      oneInchData: BytesLike,
      fromToken: AddressLike,
      foundryToken: AddressLike,
      withdrawalData: BytesLike
    ],
    [void],
    "payable"
  >;

  swapAndCrossOneInchETH: TypedContractMethod<
    [
      amountOut: BigNumberish,
      crossTargetNetwork: BigNumberish,
      crossTargetToken: AddressLike,
      crossTargetAddress: AddressLike,
      oneInchData: BytesLike,
      foundryToken: AddressLike,
      withdrawalData: BytesLike,
      gasFee: BigNumberish
    ],
    [void],
    "payable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawSigned: TypedContractMethod<
    [
      token: AddressLike,
      payee: AddressLike,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  withdrawSignedAndSwapOneInch: TypedContractMethod<
    [
      to: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      foundryToken: AddressLike,
      targetToken: AddressLike,
      oneInchData: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  withdrawSignedAndSwapOneInchForGasEstimation: TypedContractMethod<
    [
      to: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      foundryToken: AddressLike,
      targetToken: AddressLike,
      oneInchData: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  withdrawSignedForGasEstimation: TypedContractMethod<
    [
      token: AddressLike,
      payee: AddressLike,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "WETH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gasEstimationAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gasWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "inventory"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonEvmSwap"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      targetNetwork: string,
      targetToken: string,
      targetAddress: string,
      withdrawalData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "oneInchAggregatorRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGasEstimationAddress"
  ): TypedContractMethod<
    [_gasEstimationAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGasWallet"
  ): TypedContractMethod<[_gasWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOneInchAggregatorRouter"
  ): TypedContractMethod<
    [_newRouterAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPool"
  ): TypedContractMethod<[_pool: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWETH"
  ): TypedContractMethod<[_weth: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetToken: AddressLike,
      targetAddress: AddressLike,
      withdrawalData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapAndCrossOneInch"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      crossTargetNetwork: BigNumberish,
      crossTargetToken: AddressLike,
      crossTargetAddress: AddressLike,
      oneInchData: BytesLike,
      fromToken: AddressLike,
      foundryToken: AddressLike,
      withdrawalData: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapAndCrossOneInchETH"
  ): TypedContractMethod<
    [
      amountOut: BigNumberish,
      crossTargetNetwork: BigNumberish,
      crossTargetToken: AddressLike,
      crossTargetAddress: AddressLike,
      oneInchData: BytesLike,
      foundryToken: AddressLike,
      withdrawalData: BytesLike,
      gasFee: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawSigned"
  ): TypedContractMethod<
    [
      token: AddressLike,
      payee: AddressLike,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawSignedAndSwapOneInch"
  ): TypedContractMethod<
    [
      to: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      foundryToken: AddressLike,
      targetToken: AddressLike,
      oneInchData: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawSignedAndSwapOneInchForGasEstimation"
  ): TypedContractMethod<
    [
      to: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      foundryToken: AddressLike,
      targetToken: AddressLike,
      oneInchData: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawSignedForGasEstimation"
  ): TypedContractMethod<
    [
      token: AddressLike,
      payee: AddressLike,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      multiSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NonEvmSwap"
  ): TypedContractEvent<
    NonEvmSwapEvent.InputTuple,
    NonEvmSwapEvent.OutputTuple,
    NonEvmSwapEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Swap"
  ): TypedContractEvent<
    SwapEvent.InputTuple,
    SwapEvent.OutputTuple,
    SwapEvent.OutputObject
  >;
  getEvent(
    key: "SwapHandled"
  ): TypedContractEvent<
    SwapHandledEvent.InputTuple,
    SwapHandledEvent.OutputTuple,
    SwapHandledEvent.OutputObject
  >;
  getEvent(
    key: "UniswapV3SwapHandled"
  ): TypedContractEvent<
    UniswapV3SwapHandledEvent.InputTuple,
    UniswapV3SwapHandledEvent.OutputTuple,
    UniswapV3SwapHandledEvent.OutputObject
  >;
  getEvent(
    key: "UnoSwapHandled"
  ): TypedContractEvent<
    UnoSwapHandledEvent.InputTuple,
    UnoSwapHandledEvent.OutputTuple,
    UnoSwapHandledEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawOneInch"
  ): TypedContractEvent<
    WithdrawOneInchEvent.InputTuple,
    WithdrawOneInchEvent.OutputTuple,
    WithdrawOneInchEvent.OutputObject
  >;

  filters: {
    "NonEvmSwap(address,string,uint256,string,uint256,address,string,uint256,bytes32)": TypedContractEvent<
      NonEvmSwapEvent.InputTuple,
      NonEvmSwapEvent.OutputTuple,
      NonEvmSwapEvent.OutputObject
    >;
    NonEvmSwap: TypedContractEvent<
      NonEvmSwapEvent.InputTuple,
      NonEvmSwapEvent.OutputTuple,
      NonEvmSwapEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Swap(address,address,uint256,uint256,uint256,address,address,uint256,bytes32,uint256)": TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
    Swap: TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;

    "SwapHandled(address,address,address,uint256,uint256)": TypedContractEvent<
      SwapHandledEvent.InputTuple,
      SwapHandledEvent.OutputTuple,
      SwapHandledEvent.OutputObject
    >;
    SwapHandled: TypedContractEvent<
      SwapHandledEvent.InputTuple,
      SwapHandledEvent.OutputTuple,
      SwapHandledEvent.OutputObject
    >;

    "UniswapV3SwapHandled(address,address,uint256,uint256)": TypedContractEvent<
      UniswapV3SwapHandledEvent.InputTuple,
      UniswapV3SwapHandledEvent.OutputTuple,
      UniswapV3SwapHandledEvent.OutputObject
    >;
    UniswapV3SwapHandled: TypedContractEvent<
      UniswapV3SwapHandledEvent.InputTuple,
      UniswapV3SwapHandledEvent.OutputTuple,
      UniswapV3SwapHandledEvent.OutputObject
    >;

    "UnoSwapHandled(address,address,address,uint256,uint256)": TypedContractEvent<
      UnoSwapHandledEvent.InputTuple,
      UnoSwapHandledEvent.OutputTuple,
      UnoSwapHandledEvent.OutputObject
    >;
    UnoSwapHandled: TypedContractEvent<
      UnoSwapHandledEvent.InputTuple,
      UnoSwapHandledEvent.OutputTuple,
      UnoSwapHandledEvent.OutputObject
    >;

    "Withdraw(address,address,uint256,bytes32,bytes)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "WithdrawOneInch(address,uint256,uint256,address,address,bytes,bytes32,bytes)": TypedContractEvent<
      WithdrawOneInchEvent.InputTuple,
      WithdrawOneInchEvent.OutputTuple,
      WithdrawOneInchEvent.OutputObject
    >;
    WithdrawOneInch: TypedContractEvent<
      WithdrawOneInchEvent.InputTuple,
      WithdrawOneInchEvent.OutputTuple,
      WithdrawOneInchEvent.OutputObject
    >;
  };
}
