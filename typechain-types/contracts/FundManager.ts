/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FundManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "NAME"
      | "VERSION"
      | "addFoundryAsset"
      | "addLiquidity"
      | "addLiquidityByManager"
      | "addSigner"
      | "admin"
      | "allowTarget"
      | "allowedTargets"
      | "cancelFailedWithdrawSigned"
      | "cancelFailedWithdrawSignedOneInch"
      | "disallowTarget"
      | "eip712Domain"
      | "inventory"
      | "isFoundryAsset"
      | "liquidity"
      | "liquidityManager"
      | "liquidityManagerBot"
      | "nonEvmAllowTarget"
      | "nonEvmAllowedTargets"
      | "nonEvmDisallowTarget"
      | "nonEvmSwapToAddress"
      | "owner"
      | "removeFoundryAsset"
      | "removeLiquidityByManager"
      | "removeLiquidityIfPossible"
      | "removeSigner"
      | "renounceOwnership"
      | "router"
      | "setAdmin"
      | "setLiquidityManagers"
      | "setRouter"
      | "setSettlementManager"
      | "setWithdrawalAddress"
      | "settlementManager"
      | "signers"
      | "swapToAddress"
      | "transferOwnership"
      | "usedSalt"
      | "withdrawSigned"
      | "withdrawSignedOneInch"
      | "withdrawSignedOneInchVerify"
      | "withdrawSignedVerify"
      | "withdrawalAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminSet"
      | "BridgeLiquidityAdded"
      | "BridgeLiquidityRemoved"
      | "BridgeSwap"
      | "EIP712DomainChanged"
      | "FailedWithdrawalCancelled"
      | "LiquidityAddedByManager"
      | "LiquidityRemovedByManager"
      | "OwnershipTransferred"
      | "TransferBySignature"
      | "nonEvmBridgeSwap"
  ): EventFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addFoundryAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityByManager",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowTarget",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTargets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelFailedWithdrawSigned",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelFailedWithdrawSignedOneInch",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disallowTarget",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inventory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFoundryAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidity",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityManagerBot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonEvmAllowTarget",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nonEvmAllowedTargets",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nonEvmDisallowTarget",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "nonEvmSwapToAddress",
    values: [AddressLike, BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFoundryAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityByManager",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityIfPossible",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityManagers",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettlementManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapToAddress",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usedSalt", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "withdrawSigned",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSignedOneInch",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSignedOneInchVerify",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSignedVerify",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addFoundryAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityByManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelFailedWithdrawSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelFailedWithdrawSignedOneInch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disallowTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inventory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFoundryAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityManagerBot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonEvmAllowTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonEvmAllowedTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonEvmDisallowTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonEvmSwapToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFoundryAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityByManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityIfPossible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSettlementManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usedSalt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSigned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSignedOneInch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSignedOneInchVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSignedVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalAddress",
    data: BytesLike
  ): Result;
}

export namespace AdminSetEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeLiquidityAddedEvent {
  export type InputTuple = [
    actor: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [actor: string, token: string, amount: bigint];
  export interface OutputObject {
    actor: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeLiquidityRemovedEvent {
  export type InputTuple = [
    actor: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [actor: string, token: string, amount: bigint];
  export interface OutputObject {
    actor: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeSwapEvent {
  export type InputTuple = [
    from: AddressLike,
    token: AddressLike,
    targetNetwork: BigNumberish,
    targetToken: AddressLike,
    targetAddrdess: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    token: string,
    targetNetwork: bigint,
    targetToken: string,
    targetAddrdess: string,
    amount: bigint
  ];
  export interface OutputObject {
    from: string;
    token: string;
    targetNetwork: bigint;
    targetToken: string;
    targetAddrdess: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FailedWithdrawalCancelledEvent {
  export type InputTuple = [
    settlementManager: AddressLike,
    receiver: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    salt: BytesLike
  ];
  export type OutputTuple = [
    settlementManager: string,
    receiver: string,
    token: string,
    amount: bigint,
    salt: string
  ];
  export interface OutputObject {
    settlementManager: string;
    receiver: string;
    token: string;
    amount: bigint;
    salt: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityAddedByManagerEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityRemovedByManagerEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    withdrawalAddress: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    amount: bigint,
    withdrawalAddress: string
  ];
  export interface OutputObject {
    token: string;
    amount: bigint;
    withdrawalAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBySignatureEvent {
  export type InputTuple = [
    signer: AddressLike,
    receiver: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    signer: string,
    receiver: string,
    token: string,
    amount: bigint
  ];
  export interface OutputObject {
    signer: string;
    receiver: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace nonEvmBridgeSwapEvent {
  export type InputTuple = [
    from: AddressLike,
    token: AddressLike,
    targetNetwork: string,
    targetToken: string,
    targetAddrdess: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    token: string,
    targetNetwork: string,
    targetToken: string,
    targetAddrdess: string,
    amount: bigint
  ];
  export interface OutputObject {
    from: string;
    token: string;
    targetNetwork: string;
    targetToken: string;
    targetAddrdess: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FundManager extends BaseContract {
  connect(runner?: ContractRunner | null): FundManager;
  waitForDeployment(): Promise<this>;

  interface: FundManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  NAME: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  addFoundryAsset: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  addLiquidity: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  addLiquidityByManager: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  addSigner: TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;

  admin: TypedContractMethod<[], [string], "view">;

  allowTarget: TypedContractMethod<
    [token: AddressLike, chainId: BigNumberish, targetToken: AddressLike],
    [void],
    "nonpayable"
  >;

  allowedTargets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  cancelFailedWithdrawSigned: TypedContractMethod<
    [
      token: AddressLike,
      payee: AddressLike,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  cancelFailedWithdrawSignedOneInch: TypedContractMethod<
    [
      to: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      foundryToken: AddressLike,
      targetToken: AddressLike,
      oneInchData: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  disallowTarget: TypedContractMethod<
    [token: AddressLike, chainId: BigNumberish],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  inventory: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  isFoundryAsset: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  liquidity: TypedContractMethod<
    [token: AddressLike, liquidityAdder: AddressLike],
    [bigint],
    "view"
  >;

  liquidityManager: TypedContractMethod<[], [string], "view">;

  liquidityManagerBot: TypedContractMethod<[], [string], "view">;

  nonEvmAllowTarget: TypedContractMethod<
    [token: AddressLike, chainId: string, targetToken: string],
    [void],
    "nonpayable"
  >;

  nonEvmAllowedTargets: TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [string],
    "view"
  >;

  nonEvmDisallowTarget: TypedContractMethod<
    [token: AddressLike, chainId: string],
    [void],
    "nonpayable"
  >;

  nonEvmSwapToAddress: TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      targetNetwork: string,
      targetToken: string,
      targetAddress: string
    ],
    [bigint],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeFoundryAsset: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  removeLiquidityByManager: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  removeLiquidityIfPossible: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  removeSigner: TypedContractMethod<
    [_signer: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  router: TypedContractMethod<[], [string], "view">;

  setAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  setLiquidityManagers: TypedContractMethod<
    [_liquidityManager: AddressLike, _liquidityManagerBot: AddressLike],
    [void],
    "nonpayable"
  >;

  setRouter: TypedContractMethod<[_router: AddressLike], [void], "nonpayable">;

  setSettlementManager: TypedContractMethod<
    [_settlementManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setWithdrawalAddress: TypedContractMethod<
    [_withdrawalAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  settlementManager: TypedContractMethod<[], [string], "view">;

  signers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  swapToAddress: TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetAddress: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usedSalt: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  withdrawSigned: TypedContractMethod<
    [
      token: AddressLike,
      payee: AddressLike,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  withdrawSignedOneInch: TypedContractMethod<
    [
      to: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      foundryToken: AddressLike,
      targetToken: AddressLike,
      oneInchData: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  withdrawSignedOneInchVerify: TypedContractMethod<
    [
      to: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      foundryToken: AddressLike,
      targetToken: AddressLike,
      oneInchData: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [[string, string]],
    "view"
  >;

  withdrawSignedVerify: TypedContractMethod<
    [
      token: AddressLike,
      payee: AddressLike,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [[string, string]],
    "view"
  >;

  withdrawalAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addFoundryAsset"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidityByManager"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addSigner"
  ): TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowTarget"
  ): TypedContractMethod<
    [token: AddressLike, chainId: BigNumberish, targetToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowedTargets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelFailedWithdrawSigned"
  ): TypedContractMethod<
    [
      token: AddressLike,
      payee: AddressLike,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelFailedWithdrawSignedOneInch"
  ): TypedContractMethod<
    [
      to: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      foundryToken: AddressLike,
      targetToken: AddressLike,
      oneInchData: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disallowTarget"
  ): TypedContractMethod<
    [token: AddressLike, chainId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "inventory"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isFoundryAsset"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidity"
  ): TypedContractMethod<
    [token: AddressLike, liquidityAdder: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidityManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "liquidityManagerBot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonEvmAllowTarget"
  ): TypedContractMethod<
    [token: AddressLike, chainId: string, targetToken: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nonEvmAllowedTargets"
  ): TypedContractMethod<[arg0: AddressLike, arg1: string], [string], "view">;
  getFunction(
    nameOrSignature: "nonEvmDisallowTarget"
  ): TypedContractMethod<
    [token: AddressLike, chainId: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nonEvmSwapToAddress"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      targetNetwork: string,
      targetToken: string,
      targetAddress: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeFoundryAsset"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeLiquidityByManager"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityIfPossible"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeSigner"
  ): TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLiquidityManagers"
  ): TypedContractMethod<
    [_liquidityManager: AddressLike, _liquidityManagerBot: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRouter"
  ): TypedContractMethod<[_router: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSettlementManager"
  ): TypedContractMethod<
    [_settlementManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWithdrawalAddress"
  ): TypedContractMethod<
    [_withdrawalAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settlementManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "signers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "swapToAddress"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      targetNetwork: BigNumberish,
      targetAddress: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usedSalt"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawSigned"
  ): TypedContractMethod<
    [
      token: AddressLike,
      payee: AddressLike,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawSignedOneInch"
  ): TypedContractMethod<
    [
      to: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      foundryToken: AddressLike,
      targetToken: AddressLike,
      oneInchData: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawSignedOneInchVerify"
  ): TypedContractMethod<
    [
      to: AddressLike,
      amountIn: BigNumberish,
      amountOut: BigNumberish,
      foundryToken: AddressLike,
      targetToken: AddressLike,
      oneInchData: BytesLike,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [[string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawSignedVerify"
  ): TypedContractMethod<
    [
      token: AddressLike,
      payee: AddressLike,
      amount: BigNumberish,
      salt: BytesLike,
      expiry: BigNumberish,
      signature: BytesLike
    ],
    [[string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawalAddress"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AdminSet"
  ): TypedContractEvent<
    AdminSetEvent.InputTuple,
    AdminSetEvent.OutputTuple,
    AdminSetEvent.OutputObject
  >;
  getEvent(
    key: "BridgeLiquidityAdded"
  ): TypedContractEvent<
    BridgeLiquidityAddedEvent.InputTuple,
    BridgeLiquidityAddedEvent.OutputTuple,
    BridgeLiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "BridgeLiquidityRemoved"
  ): TypedContractEvent<
    BridgeLiquidityRemovedEvent.InputTuple,
    BridgeLiquidityRemovedEvent.OutputTuple,
    BridgeLiquidityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "BridgeSwap"
  ): TypedContractEvent<
    BridgeSwapEvent.InputTuple,
    BridgeSwapEvent.OutputTuple,
    BridgeSwapEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "FailedWithdrawalCancelled"
  ): TypedContractEvent<
    FailedWithdrawalCancelledEvent.InputTuple,
    FailedWithdrawalCancelledEvent.OutputTuple,
    FailedWithdrawalCancelledEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityAddedByManager"
  ): TypedContractEvent<
    LiquidityAddedByManagerEvent.InputTuple,
    LiquidityAddedByManagerEvent.OutputTuple,
    LiquidityAddedByManagerEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityRemovedByManager"
  ): TypedContractEvent<
    LiquidityRemovedByManagerEvent.InputTuple,
    LiquidityRemovedByManagerEvent.OutputTuple,
    LiquidityRemovedByManagerEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TransferBySignature"
  ): TypedContractEvent<
    TransferBySignatureEvent.InputTuple,
    TransferBySignatureEvent.OutputTuple,
    TransferBySignatureEvent.OutputObject
  >;
  getEvent(
    key: "nonEvmBridgeSwap"
  ): TypedContractEvent<
    nonEvmBridgeSwapEvent.InputTuple,
    nonEvmBridgeSwapEvent.OutputTuple,
    nonEvmBridgeSwapEvent.OutputObject
  >;

  filters: {
    "AdminSet(address)": TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;
    AdminSet: TypedContractEvent<
      AdminSetEvent.InputTuple,
      AdminSetEvent.OutputTuple,
      AdminSetEvent.OutputObject
    >;

    "BridgeLiquidityAdded(address,address,uint256)": TypedContractEvent<
      BridgeLiquidityAddedEvent.InputTuple,
      BridgeLiquidityAddedEvent.OutputTuple,
      BridgeLiquidityAddedEvent.OutputObject
    >;
    BridgeLiquidityAdded: TypedContractEvent<
      BridgeLiquidityAddedEvent.InputTuple,
      BridgeLiquidityAddedEvent.OutputTuple,
      BridgeLiquidityAddedEvent.OutputObject
    >;

    "BridgeLiquidityRemoved(address,address,uint256)": TypedContractEvent<
      BridgeLiquidityRemovedEvent.InputTuple,
      BridgeLiquidityRemovedEvent.OutputTuple,
      BridgeLiquidityRemovedEvent.OutputObject
    >;
    BridgeLiquidityRemoved: TypedContractEvent<
      BridgeLiquidityRemovedEvent.InputTuple,
      BridgeLiquidityRemovedEvent.OutputTuple,
      BridgeLiquidityRemovedEvent.OutputObject
    >;

    "BridgeSwap(address,address,uint256,address,address,uint256)": TypedContractEvent<
      BridgeSwapEvent.InputTuple,
      BridgeSwapEvent.OutputTuple,
      BridgeSwapEvent.OutputObject
    >;
    BridgeSwap: TypedContractEvent<
      BridgeSwapEvent.InputTuple,
      BridgeSwapEvent.OutputTuple,
      BridgeSwapEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "FailedWithdrawalCancelled(address,address,address,uint256,bytes32)": TypedContractEvent<
      FailedWithdrawalCancelledEvent.InputTuple,
      FailedWithdrawalCancelledEvent.OutputTuple,
      FailedWithdrawalCancelledEvent.OutputObject
    >;
    FailedWithdrawalCancelled: TypedContractEvent<
      FailedWithdrawalCancelledEvent.InputTuple,
      FailedWithdrawalCancelledEvent.OutputTuple,
      FailedWithdrawalCancelledEvent.OutputObject
    >;

    "LiquidityAddedByManager(address,uint256)": TypedContractEvent<
      LiquidityAddedByManagerEvent.InputTuple,
      LiquidityAddedByManagerEvent.OutputTuple,
      LiquidityAddedByManagerEvent.OutputObject
    >;
    LiquidityAddedByManager: TypedContractEvent<
      LiquidityAddedByManagerEvent.InputTuple,
      LiquidityAddedByManagerEvent.OutputTuple,
      LiquidityAddedByManagerEvent.OutputObject
    >;

    "LiquidityRemovedByManager(address,uint256,address)": TypedContractEvent<
      LiquidityRemovedByManagerEvent.InputTuple,
      LiquidityRemovedByManagerEvent.OutputTuple,
      LiquidityRemovedByManagerEvent.OutputObject
    >;
    LiquidityRemovedByManager: TypedContractEvent<
      LiquidityRemovedByManagerEvent.InputTuple,
      LiquidityRemovedByManagerEvent.OutputTuple,
      LiquidityRemovedByManagerEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TransferBySignature(address,address,address,uint256)": TypedContractEvent<
      TransferBySignatureEvent.InputTuple,
      TransferBySignatureEvent.OutputTuple,
      TransferBySignatureEvent.OutputObject
    >;
    TransferBySignature: TypedContractEvent<
      TransferBySignatureEvent.InputTuple,
      TransferBySignatureEvent.OutputTuple,
      TransferBySignatureEvent.OutputObject
    >;

    "nonEvmBridgeSwap(address,address,string,string,string,uint256)": TypedContractEvent<
      nonEvmBridgeSwapEvent.InputTuple,
      nonEvmBridgeSwapEvent.OutputTuple,
      nonEvmBridgeSwapEvent.OutputObject
    >;
    nonEvmBridgeSwap: TypedContractEvent<
      nonEvmBridgeSwapEvent.InputTuple,
      nonEvmBridgeSwapEvent.OutputTuple,
      nonEvmBridgeSwapEvent.OutputObject
    >;
  };
}
